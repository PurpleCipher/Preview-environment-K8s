name: Kubernetes deployment
on:
  workflow_call:
    inputs:
      deploymentTarget:
        required: true
        type: string
      prNumber:
        required: false
        type: number
      tag:
        required: false
        type: string
    secrets:
      KUBE_CONFIG: 
        required: true

env:
  BASE_HOST: sendit.ga

jobs:
  setup-k8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache Kustomize
        id: cache
        uses: actions/cache@v2
        with:
          path: kustomize
          key: kustomize
      - name: Set up Kustomize
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl -o kustomize.tar.gz --location https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.1/kustomize_v4.5.1_linux_amd64.tar.gz
          tar -xf kustomize.tar.gz
          chmod u+x ./kustomize

  pr-deployment:
    if: ${{ inputs.deploymentTarget == 'pr' }}
    runs-on: ubuntu-latest
    needs: [setup-k8]
    steps:
      - uses: actions/checkout@v2
      - name: Cache Kustomize
        id: cache
        uses: actions/cache@v2
        with:
          path: kustomize
          key: kustomize
      - name: install kubectl
        run: |
          curl -LO https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubectl
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
          echo ${{ secrets.KUBE_CONFIG }} | cat > ~/.kube/config -
      - run: |
          ls -la
          mv kustomize /usr/local/bin
          node $PWD/scripts/generate-kustomization.js $PWD/scripts/kustomization.yaml.sample $PWD/manifests/overlays/pr/kustomization.yaml pr-${{ inputs.prNumber }}-preview pr-${{ inputs.prNumber }}
          node $PWD/scripts/replace.js pr-${{ inputs.prNumber }}.preview. /spec/rules/0/host ${{ env.BASE_HOST }} $PWD/manifests/overlays/pr/ingress.json
      - name: Deploy to cluster
        run: |
          kustomize build $PWD/manifests/overlays/pr | kubectl apply --filename -

  staging-deployment:
    if: ${{ inputs.deploymentTarget == 'staging' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ github.event.registry_package.package.package_version.release.tag_name }}

  prod-deployment:
    if: ${{ inputs.deploymentTarget == 'production' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ github.event.registry_package.package.package_version.release.tag_name }}